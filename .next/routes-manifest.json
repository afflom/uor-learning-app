{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/core-axioms",
      "regex": "^/core\\-axioms(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/core\\-axioms(?:/)?$"
    },
    {
      "page": "/extensions",
      "regex": "^/extensions(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/extensions(?:/)?$"
    },
    {
      "page": "/extensions/beyondIntegers",
      "regex": "^/extensions/beyondIntegers(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/extensions/beyondIntegers(?:/)?$"
    },
    {
      "page": "/extensions/ensuringUniqueFactorization",
      "regex": "^/extensions/ensuringUniqueFactorization(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/extensions/ensuringUniqueFactorization(?:/)?$"
    },
    {
      "page": "/extensions/formalGeneralization",
      "regex": "^/extensions/formalGeneralization(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/extensions/formalGeneralization(?:/)?$"
    },
    {
      "page": "/extensions/formalSupplement",
      "regex": "^/extensions/formalSupplement(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/extensions/formalSupplement(?:/)?$"
    },
    {
      "page": "/extensions/hiddenSymphony",
      "regex": "^/extensions/hiddenSymphony(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/extensions/hiddenSymphony(?:/)?$"
    },
    {
      "page": "/extensions/incompletenessTheorem",
      "regex": "^/extensions/incompletenessTheorem(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/extensions/incompletenessTheorem(?:/)?$"
    },
    {
      "page": "/extensions/philosophicalImplications",
      "regex": "^/extensions/philosophicalImplications(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/extensions/philosophicalImplications(?:/)?$"
    },
    {
      "page": "/extensions/physicsInterpretation",
      "regex": "^/extensions/physicsInterpretation(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/extensions/physicsInterpretation(?:/)?$"
    },
    {
      "page": "/extensions/practicalTranscendence",
      "regex": "^/extensions/practicalTranscendence(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/extensions/practicalTranscendence(?:/)?$"
    },
    {
      "page": "/extensions/recentExtensions",
      "regex": "^/extensions/recentExtensions(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/extensions/recentExtensions(?:/)?$"
    },
    {
      "page": "/extensions/ultimateImplication",
      "regex": "^/extensions/ultimateImplication(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/extensions/ultimateImplication(?:/)?$"
    },
    {
      "page": "/foundations",
      "regex": "^/foundations(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/foundations(?:/)?$"
    },
    {
      "page": "/foundations/coherenceNorm",
      "regex": "^/foundations/coherenceNorm(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/foundations/coherenceNorm(?:/)?$"
    },
    {
      "page": "/foundations/intrinsicPrimes",
      "regex": "^/foundations/intrinsicPrimes(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/foundations/intrinsicPrimes(?:/)?$"
    },
    {
      "page": "/foundations/primeCoordinates",
      "regex": "^/foundations/primeCoordinates(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/foundations/primeCoordinates(?:/)?$"
    },
    {
      "page": "/foundations/primeFormula",
      "regex": "^/foundations/primeFormula(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/foundations/primeFormula(?:/)?$"
    },
    {
      "page": "/foundations/uniqueFactorization",
      "regex": "^/foundations/uniqueFactorization(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/foundations/uniqueFactorization(?:/)?$"
    },
    {
      "page": "/uor",
      "regex": "^/uor(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/uor(?:/)?$"
    },
    {
      "page": "/uor/algebraicTopologicalEnhancements",
      "regex": "^/uor/algebraicTopologicalEnhancements(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/uor/algebraicTopologicalEnhancements(?:/)?$"
    },
    {
      "page": "/uor/canonicalRepresentation",
      "regex": "^/uor/canonicalRepresentation(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/uor/canonicalRepresentation(?:/)?$"
    },
    {
      "page": "/uor/categoryTheoreticPerspective",
      "regex": "^/uor/categoryTheoreticPerspective(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/uor/categoryTheoreticPerspective(?:/)?$"
    },
    {
      "page": "/uor/fiberBundle",
      "regex": "^/uor/fiberBundle(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/uor/fiberBundle(?:/)?$"
    },
    {
      "page": "/uor/generalization",
      "regex": "^/uor/generalization(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/uor/generalization(?:/)?$"
    },
    {
      "page": "/uor/geometryOfPrimeSpaces",
      "regex": "^/uor/geometryOfPrimeSpaces(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/uor/geometryOfPrimeSpaces(?:/)?$"
    },
    {
      "page": "/uor/observerCoherence",
      "regex": "^/uor/observerCoherence(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/uor/observerCoherence(?:/)?$"
    },
    {
      "page": "/uor/overview",
      "regex": "^/uor/overview(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/uor/overview(?:/)?$"
    },
    {
      "page": "/uor/spectralInterpretation",
      "regex": "^/uor/spectralInterpretation(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/uor/spectralInterpretation(?:/)?$"
    }
  ],
  "dataRoutes": [
    {
      "page": "/",
      "dataRouteRegex": "^/_next/data/N7XzBpzEINmGhTNY1tV14/index\\.json$"
    }
  ],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}